#pragma checksum "E:\dev\.NET\ASPNETCore\ASPNETCore\Client\Views\Employee\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "dc6ccb93de8a9db0527ec5dde20e7d65e466e39e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Employee_Index), @"mvc.1.0.view", @"/Views/Employee/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\dev\.NET\ASPNETCore\ASPNETCore\Client\Views\_ViewImports.cshtml"
using Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\dev\.NET\ASPNETCore\ASPNETCore\Client\Views\_ViewImports.cshtml"
using Client.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"dc6ccb93de8a9db0527ec5dde20e7d65e466e39e", @"/Views/Employee/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3332004e6f18ccbec22253d7e177fe1fd5f40969", @"/Views/_ViewImports.cshtml")]
    public class Views_Employee_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("employeeForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "E:\dev\.NET\ASPNETCore\ASPNETCore\Client\Views\Employee\Index.cshtml"
  
    ViewData["Title"] = "Employee Data";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<div>\r\n    <h1>Employee Data</h1>\r\n");
            WriteLiteral(@"
    <div>
        <span type=""button"" class=""btn btn-primary"" data-toggle=""modal"" data-target=""#addModal"" onclick=""cleanModal()"">
            <a data-toggle=""tooltip"" data-placement=""top"" title=""Add Employee"">
                <i class=""fa fa-plus"" aria-hidden=""true""></i>
            </a>
        </span>
    </div>

    <div class=""my-3"">
        <table id=""tbl_data"" class=""display"">
            <thead>
                <tr>
                    <th>No</th>
                    <th>Name</th>
                    <th>BirthDate</th>
                    <th>Gender</th>
                    <th>Email</th>
                    <th>Action</th>
                </tr>
            </thead>
        </table>
    </div>
    
    <!-- INSERT Modal -->
    <div class=""modal fade"" id=""addModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
        <div class=""modal-dialog"" role=""document"">
            <div class=""modal-content"">
                <div class=""modal-hea");
            WriteLiteral(@"der"">
                    <h5 class=""modal-title"" id=""exampleModalLabel"">Employee Form</h5>
                    <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                        <span aria-hidden=""true"">&times;</span>
                    </button>
                </div>
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "dc6ccb93de8a9db0527ec5dde20e7d65e466e39e5243", async() => {
                WriteLiteral(@"
                    <div class=""modal-body"">
                        <div class=""form-group"">
                            <input type=""hidden"" class=""form-control"" id=""id"" name=""id"">
                        </div>

                        <div class=""form-group"">
                            <label for=""name"">Name</label>
                            <input type=""text"" class=""form-control"" id=""name"" name=""name"" placeholder=""Name"">
                        </div>
                        <div class=""form-group"">
                            <label for=""email"">Email</label>
                            <input type=""email"" class=""form-control"" id=""email"" name=""email"" aria-describedby=""emailHelp"" placeholder=""Email"">
                        </div>
                        <fieldset class=""form-group"">
                            <label for=""gender"">Gender</label>
");
                WriteLiteral(@"                            <div id=""radioGender"">
                                <div class=""form-check"">
                                    <input class=""form-check-input"" type=""radio"" name=""gender"" id=""pria"" value=""Pria"">
                                    <label class=""form-check-label"" for=""pria"">
                                        Pria
                                    </label>
                                </div>
                                <div class=""form-check"">
                                    <input class=""form-check-input"" type=""radio"" name=""gender"" id=""wanita"" value=""Wanita"">
                                    <label class=""form-check-label"" for=""wanita"">
                                        Wanita
                                    </label>
                                </div>
                            </div>
                        </fieldset>
                        <div class=""form-group"">
                            <label for=""name"">Birthdate</la");
                WriteLiteral(@"bel>
                            <input type=""date"" class=""form-control"" id=""birthdate"" name=""birthdate"">
                        </div>
                    </div>
                    <div class=""modal-footer"">
                        <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Close</button>
                        <button type=""button"" class=""btn btn-primary"" id=""btnSubmit"">Submit</button>
                    </div>
                ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <!-- END INSERT Modal -->\r\n    <!-- EDIT Modal -->\r\n    <div id=\"editView\">\r\n\r\n    </div>\r\n    <!-- END EDIT Modal -->\r\n</div>\r\n\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"

    <script src=""https://cdn.datatables.net/buttons/1.7.0/js/dataTables.buttons.min.js""></script>
    <script type=""text/javascript"" src=""https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js""></script>
    <script type=""text/javascript"" src=""https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js""></script>
    <script src=""https://cdn.datatables.net/buttons/1.7.0/js/buttons.html5.min.js""></script>
    <script src=""https://cdn.datatables.net/buttons/1.7.0/js/buttons.print.min.js""></script>

    <script src=""https://unpkg.com/sweetalert/dist/sweetalert.min.js""></script>

    <script src=""https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js""></script>

    <script>
        //DATATABLE INIT
        //let i = 1;
        
        //DATATABLE
        let table = $('#tbl_data').DataTable({
            ajax: {
                url: ""https://localhost:44320/api/em");
                WriteLiteral(@"ployee"",
                dataSrc: """"
            },
            columns: [
                //{ ""data"": ""id"" },
                {
                    //""data"": null
                    ""render"": (data, type, row, meta) => {
                        return meta.row + meta.settings._iDisplayStart + 1;
                    }
                },
                { ""data"": ""name"" },
                {
                    ""data"": ""birthDate"",
                    ""render"": (birthDate) => {
                        let date = moment(birthDate)
                        return date.format('DD MMMM YYYY');
                    }
                },
                { ""data"": ""gender"" },
                { ""data"": ""email"" },
                {
                    'data': 'id',
                    ""render"": function (id) {
                        return `<a class=""popup btn btn-warning"" data-toggle=""tooltip"" data-placement=""top"" title=""Edit Employee"" id=""btnEdit"" onclick=""Edit(${id})""><i class= ""fa fa-pencil-sq");
                WriteLiteral(@"uare-o""></i></a> | <button class=""popup btn btn-danger"" data-toggle=""tooltip"" data-placement=""top"" title=""Delete Employee"" id=""btnDelete"" onclick=""Delete(${id})""><i class=""fa fa-trash""></i></a>`;
                    }
                }
            ],
            columnDefs: [
                {
                    targets: [3, 5],
                    sortable: false,
                    searchable: false
                }
            ],
            dom: 'Bfrtip',
            buttons: [
                {
                    extend: 'excelHtml5',
                    autoFilter: true,
                    sheetName: 'Employee Sheet',
                    title: 'Data Employee',
                    exportOptions: {
                        columns: [0, 1, 2, 3, 4],
                        modifier: { order: 'index' }
                    }
                }
            ]
        })
        //END DATATABLE


        

        //DOCUMENT.READY
        $(document).ready(function () {

   ");
                WriteLiteral(@"         //DATATABLE
            table.on('order.dt search.dt', function () {
                table.column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
                    cell.innerHTML = i + 1;
                });
            }).draw();
            //END DATATABLE
            
            $('#employeeForm').validate({
                rules: {
                    name: {
                        required: true
                    },
                    email: {
                        required: true,
                        minlength: 5
                    },
                    gender: {
                        required: true
                    },
                    birthdate: {
                        required: true
                    }
                },
                messages: {
                    name: ""Please input a name"",
                    email: {
                        required: ""Please input an email"",
                        ema");
                WriteLiteral(@"il: ""Please input a valid email address""
                    },
                    gender: ""  Please pick a gender""
                },
                errorPlacement:
                    function (error, element) {
                        if (element.is("":radio"")) {
                            // error append here
                            error.appendTo('#radioGender');
                        }
                        else {
                            error.insertAfter(element);
                        }
                    },
                submitHandler: function (form) {
                    // your ajax would go here
                    var User = new Object()
                    User.Id = $('#id').val()
                    User.Name = $('#name').val()
                    User.Email = $('#email').val()
                    User.Gender = $(""input[type='radio'][name='gender']:checked"").val();
                    User.BirthDate = $('#birthdate').val()
                    console.lo");
                WriteLiteral(@"g(User)
                    if (User.Id == """") {
                        //fungsi insert here
                        console.log(User)
                        AddData(User)

                    } else {
                        //fungsi update here
                        console.log(""UPDATE"")
                        Update(User)
                    }
                    
                    return false;  // blocks regular submit since you have ajax
                }
            })

            //ON SUBMIT
            $('#btnSubmit').click(function () {
                $('#employeeForm').submit()
            })
            //END ON SUBMIT
            
        })
        //END DOCUMENT.READY


        //RANDOM
        //END RANDOM


        //INSERT
        const AddData = (User) => {
            $.ajax({
                type: ""POST"",
                url: ""Employee/AddEmployee"",
                data: User,

                success: (data) => {
                    if (data");
                WriteLiteral(@" == 200) {
                        $(""#addModal"").modal('hide');
                        swal({
                            title: ""Success!"",
                            text: ""Data added to database!"",
                            icon: ""success"",
                        }
                        ).then(() => {
                            table.ajax.reload()
                        })
                    } else {
                        swal(""Failed!"", ""Input data failed!"", ""error"")
                    }
                },
                error: (data) => {
                    swal(""Failed!"", ""Input data failed!"", ""error"")
                }
            })
        }
        //END INSERT

        //DELETE
        const Delete = (id) => {
            swal(""Are you sure you want to delete this data?"", {
                buttons: {
                    cancel: ""NO"",
                    catch: {
                        text: ""YES"",
                        value: ""confirm"",
              ");
                WriteLiteral(@"      },
                },
            }).then((value) => {
                switch (value) {
                    case ""confirm"":
                        $.ajax({
                            type: ""DELETE"",
                            url: `Employee/Delete/${id}`,
                            success: (data) => {
                                console.log(data)
                                if (data == 200) {
                                    swal(""Deleted!"", ""data has been deleted!"", ""success"")
                                        .then(() => {
                                            table.ajax.reload()
                                        })
                                } else {
                                    swal(""failed!"", ""An error occured when deleting data"", ""error"")
                                }
                            },
                            error: (data) => {
                                swal(""failed!"", ""An error occured when deleting data""");
                WriteLiteral(@", ""error"")
                                console.log(data)
                            }
                        })

                        break

                    default:
                        swal(""Cancelled"")
                }
            })
        }
        //END DELETE

        //EDIT (show modal)
        const Edit = (id) => {
            $.ajax({
                type: ""GET"",
                url: `Employee/Edit/${id}`,
                success: (data) => {
                    console.log(data)
                    let myModal = $('#addModal')
                    $('#id').val(data.id)
                    $('#name').val(data.name)
                    $('#email').val(data.email)
                    $(`input[name='gender'][value='${data.gender}']`).prop('checked', true)
                    const date = moment(data.birthDate).format('YYYY-MM-DD')
                    $('#birthdate').val(date)
                    myModal.modal('show')
                },
                err");
                WriteLiteral(@"or: (data) => {
                    console.log(data)
                }
            })
        }
        //END EDIT

        //UPDATE
        const Update = (User) => {
            $.ajax({
                type: ""POST"",
                url: ""Employee/Update"",
                data: User,

                success: (data) => {
                    if (data == 200) {
                        $(""#addModal"").modal('hide');
                        swal({
                            title: ""Success!"",
                            text: ""Data has been edited successfully!"",
                            icon: ""success"",
                        }
                        ).then(() => {
                            table.ajax.reload()
                        })
                    } else {
                        swal(""Failed!"", ""Edit data failed!"", ""error"")
                    }
                },
                error: (data) => {
                    swal(""Failed!"", ""Edit data failed!"", ""error"")");
                WriteLiteral(@"
                }
            })
        }

        const cleanModal = () => {
            $('#id').val('')
            $('#name').val('')
            $('#email').val('')
            $(""input[name='gender']"").prop('checked', false)
            $('#birthdate').val('')
        }

    </script>

");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
