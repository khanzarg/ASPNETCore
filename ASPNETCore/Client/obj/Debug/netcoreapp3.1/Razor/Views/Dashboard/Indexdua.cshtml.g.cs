#pragma checksum "C:\Users\Alpha\source\repos\ASPNETCore\ASPNETCore\Client\Views\Dashboard\Indexdua.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8fecdf7f4ace820c87c3bcf1e6052fd9dffac66b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Dashboard_Indexdua), @"mvc.1.0.view", @"/Views/Dashboard/Indexdua.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Alpha\source\repos\ASPNETCore\ASPNETCore\Client\Views\_ViewImports.cshtml"
using Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Alpha\source\repos\ASPNETCore\ASPNETCore\Client\Views\_ViewImports.cshtml"
using Client.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8fecdf7f4ace820c87c3bcf1e6052fd9dffac66b", @"/Views/Dashboard/Indexdua.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3332004e6f18ccbec22253d7e177fe1fd5f40969", @"/Views/_ViewImports.cshtml")]
    public class Views_Dashboard_Indexdua : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "all", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\Alpha\source\repos\ASPNETCore\ASPNETCore\Client\Views\Dashboard\Indexdua.cshtml"
  
    ViewData["Title"] = "Dashboard";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">Welcome</h1>
    <p>Learn about <a href=""https://docs.microsoft.com/aspnet/core"">building Web apps with ASP.NET Core</a>.</p>
</div>

<div class=""container"">
    <label for=""year"">Years</label>
    <select class=""form-control"" id=""year"" >
        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8fecdf7f4ace820c87c3bcf1e6052fd9dffac66b3926", async() => {
                WriteLiteral("ALL");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n    </select>\r\n    <div id=\"chart\">\r\n    </div>\r\n</div>\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
<script src=""https://code.jquery.com/jquery-3.6.0.min.js""></script>
<script src=""https://cdn.jsdelivr.net/npm/apexcharts""></script>
<script type=""text/javascript"">

    $(document).ready(function () {

        ajaxReq()
        // bikin function buat ambil chart
        // if all parameter tahun
        // render ulang chart

        $(""#year"").change(function () {
            let value = $(""option:selected"").val()
            if (value == ""all"") {
                ajaxReq()
            } else {
                ajaxReq(value)
            }
        });
    
    });


    // function request ajax
    let ajaxReq = (year) => {
        let years = [];
        let test = [];
        let urlEmployee = ""https://localhost:44320/api/Employee/"";
        console.log(year);
        $.ajax({
            url: urlEmployee,
            type: ""GET"",
        }).done((result) => {
            let datas = result.map(r => {
                return r;
            });

            let chartDatas");
                WriteLiteral(@" = datas.map(r => {
                // ambil day month year
                let day = r.birthDate.substr(8, 2);
                let month = r.birthDate.substr(5, 2);
                let year = r.birthDate.substr(0, 4);

                // masukkan kedalam array
                let dateArr = [];
                dateArr.push(day);
                dateArr.push(month);
                dateArr.push(year);

                // gabung dengan slash
                let date = dateArr.join('/');

                //console.log(dateArr);
                //console.log(date);

                return {
                    year: year,
                    gender: r.gender
                }
            }).sort((a, b) => {
                return a.year - b.year
            });

            let startYears = parseInt(chartDatas[0].year);
            let endYears = chartDatas[chartDatas.length - 1].year;
           

            // dapetin tahun urut dari awal sampai akhir
            // sesuai data
");
                WriteLiteral(@"            for (let i = startYears; i <= endYears; i++) {
                years.push(i.toString());
            }

            //let employeesBirthYear = []
            //employees.map(employee => {
            //    if (employeesBirthYear.includes(employee.year)) {
            //        return false
            //    } else {
            //        employeesBirthYear.push(employee.year)
            //    }
            //})
           
            chartDatas.map(y => {
                if (test.includes(y.year)) {
                    return false
                } else {
                    test.push(y.year)
                }
            })

            console.log(test);        


            let pria = chartDatas.filter(r => {
                return r.gender == ""pria""
            }).map(r => {
                return r.year
            })

            console.log(pria)
            let wanita = chartDatas.filter(r => {
                return r.gender == ""wanita""
            }).");
                WriteLiteral(@"map(r => {
                return r.year
            })

            // menghitung jumlah gender pertahun
            // dari youtube https://www.youtube.com/watch?v=P3gJr_Rd80g
            let initValue = 0;
            let count = (arr, val) => {
                return arr.reduce((acc, elem) => {
                    return (val === elem ? acc + 1 : acc)
                }, initValue)
            }

            // simpan jumlah pria danw anita
            let countPria = [];
            let countWanita = [];

            // hitung jumlah pria / wanita dalam pertahun
            for (let i = 0; i < test.length; i++) {
                let resultPria = count(pria, test[i]);
                let resultWanita = count(wanita, test[i]);
                countPria.push(resultPria);
                countWanita.push(resultWanita);
            }

            var options = {
                series: [{
                    name: 'Pria',
                    data: countPria
                }, {
  ");
                WriteLiteral(@"                  name: 'Wanita',
                    data: countWanita
                }],
                chart: {
                    height: 350,
                    type: 'bar',
                },
                plotOptions: {
                    bar: {
                        horizontal: false,
                        borderRadius: 7,
                        columnWidth: '70%',
                        endingShape: 'rounded'
                    },
                },
                xaxis: {
                    labels: {
                        format: 'yyyy',
                    },
                    //type: 'datetime',
                    categories: test
                },
                dataLabels: {
                    enabled: false
                },
                title: {
                    text: 'Ajax Example',
                },
                stroke: {
                    show: true,
                    width: 2,
                    colors: ['transparent']");
                WriteLiteral(@"
                },
                colors: [""#247BA0"", ""#FF1654""],
                fill: {
                    opacity: 1
                },
                noData: {
                    text: 'Loading...'
                },
            }

            var chart = new ApexCharts(
                document.querySelector(""#chart""),
                options
            );

            chart.render();

            console.log(chartDatas);

        
            populate('#year', test);
        }).fail((error) => {
            //failed
            console.log(""request gagal"");
        });
    
    }

    // option selection
    let populate = (selector, data) => {
        data.forEach((item) => {
            $(selector).append(`<option value=""${item}"">${item}</option>`)
        })
    }

</script>

");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
