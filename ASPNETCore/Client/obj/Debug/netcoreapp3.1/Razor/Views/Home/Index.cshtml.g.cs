#pragma checksum "C:\Users\alfat\source\repos\ASPNETCore\ASPNETCore\ASPNETCore\Client\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "100815706ec2bd61b88a87fcffd352d2e4cd1d0b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\alfat\source\repos\ASPNETCore\ASPNETCore\ASPNETCore\Client\Views\_ViewImports.cshtml"
using Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\alfat\source\repos\ASPNETCore\ASPNETCore\ASPNETCore\Client\Views\_ViewImports.cshtml"
using Client.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"100815706ec2bd61b88a87fcffd352d2e4cd1d0b", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3332004e6f18ccbec22253d7e177fe1fd5f40969", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("needs-validation"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\alfat\source\repos\ASPNETCore\ASPNETCore\ASPNETCore\Client\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<link href=""https://cdn.datatables.net/1.10.24/css/jquery.dataTables.min.css"" rel=""stylesheet"" />

<div class=""container"">

    <button type=""button"" onclick=""dynamicOnClick('register')"" class=""btn btn-success my-3"" data-toggle=""modal"" data-target=""#add"" data-placement=""top"" title=""Add Data"">
        <i class=""fas fa-plus-square""></i>
    </button>

    <table id=""EmployeesTable"" class=""display"" style=""width:100%"">
        <thead>
            <tr>
                <th>No</th>
                <th>Name</th>
                <th>Birth Date</th>
                <th>Gender</th>
                <th>Email</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>

</div>

<!-- Modal Add-->
");
            WriteLiteral(@"



<div class=""modal fade"" id=""add"" tabindex=""-1"" role=""dialog"" aria-labelledby=""add"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"" id=""addlabel"">Employee Form</h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "100815706ec2bd61b88a87fcffd352d2e4cd1d0b5250", async() => {
                WriteLiteral(@"
                    <input type=""hidden"" class=""form-control"" id=""id"" required>

                    <div class=""form-group row"">
                        <label for=""name"" class=""col-sm-2 col-form-label"">Name</label>
                        <div class=""col-sm-10"">
                            <input type=""text"" class=""form-control"" id=""name"" placeholder=""Name"" required>
                            <div class=""valid-feedback"">
                                Looks good!
                            </div>
                            <div class=""invalid-feedback"">
                                Please fill name.
                            </div>
                        </div>
                    </div>

                    <div class=""form-group row"">
                        <label for=""email"" class=""col-sm-2 col-form-label"">Email</label>
                        <div class=""col-sm-10"">
                            <input type=""email"" class=""form-control"" id=""email"" placeholder=""Email"" require");
                WriteLiteral(@"d>
                            <div class=""valid-feedback"">
                                Looks good!
                            </div>
                            <div class=""invalid-feedback"">
                                Please fill Email.
                            </div>
                        </div>
                    </div>

                    <div class=""form-group row"">
                        <label for=""birthdate"" class=""col-sm-2 col-form-label"">Birth Date</label>
                        <div class=""col-sm-10"">
                            <input type=""date"" class=""form-control"" id=""birthdate"" placeholder=""Birth Date"" required>
                            <div class=""valid-feedback"">
                                Looks good!
                            </div>
                            <div class=""invalid-feedback"">
                                Please Choose Birth Date.
                            </div>
                        </div>
                    </div>
");
                WriteLiteral(@"
                    <fieldset class=""form-group"">
                        <div class=""row"">
                            <legend class=""col-form-label col-sm-2 pt-0"">Gender</legend>
                            <div class=""col-sm-10"">
                                <div class=""form-check"">
                                    <input class=""form-check-input"" type=""radio"" name=""gender"" id=""male"" value=""Pria"" required>
                                    <label class=""form-check-label"" for=""gridRadios1"">
                                        Male
                                    </label>
                                    <div class=""valid-feedback"">
                                        Looks good!
                                    </div>
                                    <div class=""invalid-feedback"">
                                        Please Choose Gender.
                                    </div>
                                </div>
                                <div cla");
                WriteLiteral(@"ss=""form-check"">
                                    <input class=""form-check-input"" type=""radio"" name=""gender"" id=""female"" value=""Wanita"" required>
                                    <label class=""form-check-label"" for=""gridRadios2"">
                                        Female
                                    </label>
                                    <div class=""valid-feedback"">
                                        Looks good!
                                    </div>
                                    <div class=""invalid-feedback"">
                                        Please Choose Gender.
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>

                    <div class=""modal-footer"">
                        <div class=""form-group row"">
                            <div class=""col-sm-10"">
                                <button id=""submit"" typ");
                WriteLiteral("e=\"submit\" class=\"btn btn-primary\"");
                BeginWriteAttribute("onclick", " onclick=\"", 7513, "\"", 7523, 0);
                EndWriteAttribute();
                WriteLiteral(">Save changes</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("novalidate", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js""></script>
    <script src=""https://unpkg.com/sweetalert/dist/sweetalert.min.js""></script>

    <script src=""https://cdn.datatables.net/1.10.24/js/jquery.dataTables.min.js""></script>
    <script src=""https://cdn.datatables.net/buttons/1.7.0/js/dataTables.buttons.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js""></script>
    <script src=""https://cdn.datatables.net/buttons/1.7.0/js/buttons.html5.min.js""></script>
    <script src=""https://cdn.datatables.net/buttons/1.7.0/js/buttons.print.min.js""></script>


    <script>
        $(document).ready(function () {
            let t = $(""#EmployeesTable"").DataTable({
                dom: 'Bfrtip',
                buttons: [
 ");
                WriteLiteral(@"                   'copy', 'csv', 'excel', 'pdf', 'print'
                ],
                ajax: {
                    url: ""https://localhost:44320/api/Employee"",
                    dataSrc: """"
                },
                columns: [
                    {
                        //""data"": null,
                        //""searchable"": false,
                        //""orderable"": false,
                        //""targets"": 0


                        ""data"": null,
                        ""searchable"": false,
                        ""orderable"": false,
                        ""render"": (data, type, row, meta) => {
                            return meta.row + meta.settings._iDisplayStart + 1;
                        }
                    },
                    { ""data"": ""name"" },
                    {
                        ""render"": function (data, type, row) {
                            var date = moment(row['birthDate']).format('DD MMMM YYYY');
                           ");
                WriteLiteral(@" return date;
                        }
                    },
                    { ""data"": ""gender"" },
                    { ""data"": ""email"" },
                    {
                        ""data"": null,
                        ""render"": function (data, type, row) {
                            return `<button type=""button"" class=""btn btn-warning"" onclick=""dynamicOnClick(${row[""id""]})"" data-toggle=""modal"" data-nama=""arsya"" data-target=""#add"" data-placement=""top"" title=""Update Data"" id=""update""><i class=""fas fa-pen""></i> </button>  <button type=""button"" class=""btn btn-danger"" onclick=""Delete(${row[""id""]})"" data-placement=""top"" title=""Delete Data""><i class=""far fa-minus-square""></i></button>`;
                        },
                        ""orderable"": false,
                        ""searchable"": false
                    }
                ],
                ""order"": [1]
            });
            t.on('order.dt search.dt', function () {
                t.column(0, { search: 'applied', or");
                WriteLiteral(@"der: 'applied' }).nodes().each(function (cell, i) {
                    cell.innerHTML = i + 1;
                });
            }).draw();

           
        })

            // Example starter JavaScript for disabling form submissions if there are invalid fields
        //(function () {
        //    'use strict';
        //    window.addEventListener('load', function () {
        //        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        //        var forms = document.getElementsByClassName('needs-validation');
        //        // Loop over them and prevent submission
        //        var validation = Array.prototype.filter.call(forms, function (form) {
        //            form.addEventListener('submit', function (event) {
        //                if (form.checkValidity() === false) {
        //                    event.preventDefault();
        //                    event.stopPropagation();
        //                }
        //               ");
                WriteLiteral(@" form.classList.add('was-validated');
        //            }, false);
        //        });
        //    }, false);
        //})();

        let Delete = (Id) => {
            swal({
                title: ""Are you sure?"",
                text: ""Once deleted, you will not be able to recover this data!"",
                icon: ""warning"",
                buttons: true,
                dangerMode: true,
            })
                .then((willDelete) => {
                    if (willDelete) {
                        $.ajax({
                            url: `/Employee/Delete/${Id}`,
                            type: ""DELETE""
                        }).done((result) => {
                            if (result == 200) {
                                swal({
                                    title: ""Success"",
                                    text: ""Data succsess deleted"",
                                    icon: ""success"",
                                    button: ""Ok""
        ");
                WriteLiteral(@"                        }).then(() => { location.reload() })
                            }
                        }).fail((error) => {
                            console.log(error);
                            swal(""Failed Deleted Data"", "" "", ""error"");
                        })
                    } else {
                        swal(""Your data is safe!"");
                    }

                });
        }

        let insert = () => {
            'use strict';
            window.addEventListener('load', function () {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                var forms = document.getElementsByClassName('needs-validation');
                // Loop over them and prevent submission
                let validation = Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                     ");
                WriteLiteral(@"       event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);

            console.log(validation);
            alert(""asasa"");

            let emp = new Object();

            emp.name = $(""#name"").val();
            emp.birthDate = $(""#birthdate"").val();
            emp.gender = $('input[name=""gender""]:checked').val();
            emp.email = $(""#email"").val();


            $.ajax({
                url: '/Employee/AddEmployee',
                type: ""POST"",
                data: emp
            }).done(result => {
                if (result == 200) {
                    swal({
                        title: ""Good job!"",
                        text: ""You clicked the button!"",
                        icon: ""success"",
                        button: ""Aww yiss!"",
                    }).then(() => { ");
                WriteLiteral(@"location.reload() })
                }
            }).fail(result => {
                alert(""failed"")
            })
        }

        let clearModal = () => {
            $(""#name"").val("""");
            $(""#email"").val("""");
            $(""#birthdate"").val("""");
            $(""#male"").prop(""checked"", false)
            $(""#female"").prop(""checked"", false)
        }

        let dynamicOnClick = param => {
            let name;

            if (param == ""register"") {
                name = ""Add New Employee"";
                clearModal();
                $(""#submit"").attr(""onclick"", ""insert()"");

            } else {
                name = ""Edit Employee"";
                getById(param);
                $(""#submit"").attr(""onclick"", `update()`);
            }
            $(""#addlabel"").text(name);
        }

        let getById = id => {
            console.log(""mulai"");
            $.ajax({
                url: `/Employee/GetById/${id}`,
                type: ""GET""
         ");
                WriteLiteral(@"   }).done(result => {
                let jsonResult = JSON.parse(result);
                let d = new Date();
                let year = d.getFullYear(jsonResult.birthDate);
                let month = (""0"" + d.getMonth(jsonResult.birthDate)).slice(-2);
                let day = d.getDate(jsonResult.birthDate)
                console.log(jsonResult);

                $(""#id"").val(jsonResult.id);
                $(""#name"").val(jsonResult.name);
                $(""#email"").val(jsonResult.email);
                $(""#birthdate"").val(`${year}-${month}-${day}`);
                console.log(jsonResult.gender);
                if (jsonResult.gender.toLowerCase() == ""pria"") {
                    $(""#male"").prop(""checked"", true)
                } else {
                    $(""#female"").prop(""checked"", true)
                }


            }).fail(result => {
                return result;
            })
        }

        let update = () => {
            let emp = new Object();
            ");
                WriteLiteral(@"console.log(""muali update"");
            emp.id = $(""#id"").val();
            emp.name = $(""#name"").val();
            emp.birthDate = $(""#birthdate"").val();
            emp.gender = $('input[name=""gender""]:checked').val();
            emp.email = $(""#email"").val();


            $.ajax({
                url: '/Employee/Update',
                type: ""PUT"",
                data: emp
            }).done(result => {
                if (result == 200) {
                    swal({
                        title: ""Good job!"",
                        text: ""You clicked the button!"",
                        icon: ""success"",
                        button: ""Aww yiss!"",
                    }).then(() => { location.reload() })
                }
            }).fail(result => {
                alert(""failed"")
            })
        }

        console.log(insert);
    </script>


");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
