#pragma checksum "D:\Visual Studio Source\ASPNETCore\ASPNETCore\Client\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6c6d88e2889a26042f338e16f4aca657d53d988c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Visual Studio Source\ASPNETCore\ASPNETCore\Client\Views\_ViewImports.cshtml"
using Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Visual Studio Source\ASPNETCore\ASPNETCore\Client\Views\_ViewImports.cshtml"
using Client.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6c6d88e2889a26042f338e16f4aca657d53d988c", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3332004e6f18ccbec22253d7e177fe1fd5f40969", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("formSubmit"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\Visual Studio Source\ASPNETCore\ASPNETCore\Client\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">Table Employee</h1>
    <p>Learn about <a href=""https://docs.microsoft.com/aspnet/core"">building Web apps with ASP.NET Core</a>.</p>
</div>
<link rel=""stylesheet"" href=""https://cdn.datatables.net/1.10.24/css/jquery.dataTables.min.css"">
<link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"" integrity=""sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"" crossorigin=""anonymous"">

<div class=""container"">
    <div class=""my-3"">
        <!--Tombol Add-->
        <button type=""button"" class=""btn btn-success my-3"" data-bs-toggle='modal' data-bs-target=""#add"" data-toggle=""tooltip"" data-placement=""top"" title=""Add Data"" onclick=""clearModal()"">
            <i class=""fa fa-plus""></i>
        </button>
        <!--Table-->
        <table id=""tb_API"" class=""display"" style=""width:100%"">
            <thead>
                <tr>
                    <th>No</th>
                    <th>Name</t");
            WriteLiteral(@"h>
                    <th>Email</th>
                    <th>Gender</th>
                    <th>Birth Date</th>
                    <th>Action</th>
                </tr>
            </thead>
        </table>

    </div>
</div>


<!--Modal Post & Put-->
<div class=""modal fade"" id=""add"" data-bs-backdrop=""static"" data-bs-keyboard=""false"" tabindex=""-1"" aria-labelledby=""add"" aria-hidden=""true"">
    <div class=""modal-dialog"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"" id=""add"">Enter your data</h5>
                <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""> X </button>
            </div>
            <div class=""modal-body"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6c6d88e2889a26042f338e16f4aca657d53d988c5654", async() => {
                WriteLiteral(@"
                    <div class=""mb-3"">
                        <!--Id-->
                        <input type=""hidden"" class=""form-control"" id=""id"" name=""id"">
                        <!--Name-->
                        <div class=""form-group"">
                            <label for=""name"" class=""form-label"">Name</label>
                            <div class=""col-md-12"">
                                <input type=""text"" name=""name"" class=""form-control"" id=""name"" placeholder=""Enter your name"" required>
                            </div>
                        </div>
                        <!--Email-->
                        <div class=""form-group"">
                            <label for=""email"" class=""form-label"">Email</label>
                            <div class=""col-md-12"">
                                <input type=""email"" name=""email"" class=""form-control"" id=""email"" placeholder=""Enter your email"" required>
                            </div>
                        </div>
          ");
                WriteLiteral(@"              <!--Gender-->
                        <div class=""form-group"">
                            <label for=""gender"" class=""form-label"">Gender</label>
                            <div class=""col-md-12"">
                                <input type=""radio"" id=""male"" name=""gender"" value=""Pria"" required>
                                <label for=""Pria"">Pria</label><br>
                                <input type=""radio"" id=""female"" name=""gender"" value=""Wanita"" required>
                                <label for=""Wanita"">Wanita</label><br>
                            </div>
                        </div>
                        <!--Birth Date-->
                        <div class=""form-group"">
                            <label for=""birthdate"" class=""form-label"">Birth Date</label>
                            <div class=""col-md-12"">
                                <input type=""date"" name=""birthDate"" class=""form-control"" id=""birthDate"" placeholder=""Enter your birth date"" required>
          ");
                WriteLiteral("                  </div>\r\n                        </div>\r\n                    </div>\r\n                    <button type=\"submit\" class=\"btn btn-primary\" id=\"submit\">Submit</button>\r\n                ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div id=\"editView\">\r\n\r\n</div>\r\n\r\n\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral("\r\n");
                WriteLiteral(@"    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js""
            integrity=""sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf"" crossorigin=""anonymous""></script>
    <script src=""https://cdn.datatables.net/1.10.24/js/jquery.dataTables.min.js""></script>
    <script src=""https://unpkg.com/sweetalert/dist/sweetalert.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"" integrity=""sha512-qTXRIMyZIFb8iQcfjXWCO8+M5Tbc38Qi5WzdPOYZHIlZpzBHG3L3by84BBBOiRGiEb7KKtAOAs5qYdUiZiQNNQ=="" crossorigin=""anonymous"" referrerpolicy=""no-referrer""></script>

");
                WriteLiteral(@"    <script src=""https://cdn.datatables.net/buttons/1.6.2/js/dataTables.buttons.min.js""></script>
    <script src=""https://cdn.datatables.net/buttons/1.6.2/js/buttons.bootstrap4.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js""></script>
    <script src=""https://cdn.datatables.net/buttons/1.6.2/js/buttons.html5.min.js""></script>
    <script src=""https://cdn.datatables.net/buttons/1.6.2/js/buttons.print.min.js""></script>
    <script src=""https://cdn.datatables.net/buttons/1.6.2/js/buttons.colVis.min.js""></script>

    <script>
        let table = null;
        $(document).ready(function () {
            //Prevent reload form
            $(""#formSubmit"").submit(function (e) {
                e.preventDefault();
            });
            //table
          ");
                WriteLiteral(@"  table = $('#tb_API').DataTable({
                ajax: {
                    url: ""https://localhost:44320/api/Employee"",
                    type: ""GET"",
                    dataSrc: ''
                },
                columns: [
                    {
                        ""data"": null,
                        ""render"": function (data, type, row, meta) {
                            return meta.row + meta.settings._iDisplayStart + 1;
                        }
                        /*""targets"": 0*/
                    },

                    { ""data"": ""name"" },
                    { ""data"": ""email"" },
                    {
                        ""data"": ""gender"",
                        ""orderable"": false,
                        ""searchable"": false
                    },
                    {
                        ""data"": ""birthDate"",
                        render: function (data, type, row) {
                            let date = moment(row.birthDate).format('DD MMMM YYY");
                WriteLiteral(@"Y');
                            return date;
                        },
                        ""orderable"": false
                    },
                    {
                        //""data"": null,
                        ""render"": function (data, type, row) {
                            return '<button class=""btn btn-primary"" data-bs-toggle=""modal"" data-bs-target=""#update"" onclick=""getId(' + row.id + ')"" data-toggle=""tooltip"" data-placement=""top"" title=""Edit Data""><i class=""fa fa-edit""></i></button>'
                                +
                                ' <button id=""deleteTable"" class=""btn btn-danger"" onclick=""sAlertDelete(' + row['id'] + ')"" data-toggle=""tooltip"" data-placement=""top"" title=""Delete Data""><i class=""fa fa-trash""></i></button>';
                        },
                        ""orderable"": false,
                        ""searchable"": false
                    },
                ],
                ""dom"": 'Bfrtip',
                ""buttons"": [
                 ");
                WriteLiteral(@"   {
                        extend: 'copy',
                        className: 'btn btn-dark rounded-0',
                        text: '<i class=""far fa-copy""></i> Copy',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4],
                            modifier: {
                                columns: 'visible',
                                order: 'index'
                            }
                        }
                    },
                    {
                        extend: 'excel',
                        className: 'btn btn-dark rounded-0',
                        text: '<i class=""far fa-file-excel""></i> Excel',
                        //text: '<i class=""bi bi-file-earmark-excel""></i> Excel',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4],
                            modifier: {
                                columns: 'visible',
                                order: 'index'
    ");
                WriteLiteral(@"                        }
                        }

                        //text: `<svg xmlns=""http://www.w3.org/2000/svg"" width=""16"" height=""16"" fill=""currentColor"" class=""bi bi-file-earmark-spreadsheet-fill"" viewBox=""0 0 16 16"">
                        //    < path d=""M6 12v-2h3v2H6z"" />
                        //    <path d=""M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0zM9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1zM3 9h10v1h-3v2h3v1h-3v2H9v-2H6v2H5v-2H3v-1h2v-2H3V9z"" /></svg>`,

                    },
                    {
                        extend: 'pdf',
                        className: 'btn btn-dark rounded-0',
                        text: '<i class=""far fa-file-pdf""></i> Pdf',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4],
                            modifier: {
                                columns: 'visible',
                                order: 'index'
                  ");
                WriteLiteral(@"          }
                        }
                    },
                    {
                        extend: 'csv',
                        className: 'btn btn-dark rounded-0',
                        text: '<i class=""fas fa-file-csv""></i> CSV',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4],
                            modifier: {
                                columns: 'visible',
                                order: 'index'
                            }
                        }
                    },
                    {
                        extend: 'print',
                        className: 'btn btn-dark rounded-0',
                        text: '<i class=""fas fa-print""></i> Print',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4],
                            modifier: {
                                columns: 'visible',
                                order: 'index'
         ");
                WriteLiteral(@"                   }
                        }
                    }
                ],
                ""order"": [[1, 'asc']],
            });
            table.on('order.dt search.dt', function () {
                table.column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
                    cell.innerHTML = i + 1;
                });
            }).draw();

            $(""#submit"").click(function () {
                let obj = new Object();
                console.log(obj);
                obj.id = $(""#id"").val();
                obj.name = $(""#name"").val();
                obj.email = $(""#email"").val();
                obj.birthDate = $(""#birthDate"").val();
                obj.gender = $(""input[type='radio'][name='gender']:checked"").val();

                console.log(obj);
                var i;
                var emailCheck;
                var check = 0;
                for (i = 0; i < obj.email.length; i++) {
                    if (obj.email[");
                WriteLiteral("i] == \"");
                WriteLiteral(@"@"") {
                        check++;
                    }
                    if (check > 0) {
                        emailCheck = true;
                    }
                    else {
                        emailCheck = false;
                    }
                }

                if (obj.name == """" || obj.email == """" || obj.gender == null || obj.birthDate == """" || emailCheck == false ) {

                }
                else {
                    if (obj.id == """") {
                        Insert(obj);
                    }
                    else {
                        Update(obj);
                    }
                }

            })
        })

    </script>

    <script>

        let sAlertNull = () => {
            swal({
                title: ""No data"",
                text: ""Please fill the required field."",
                icon: ""Warning"",
                button: ""Ok"",
                dangerMode: true,
            });
        }
        let Inse");
                WriteLiteral(@"rt = (obj) => {
            $.ajax({
                url: ""/Employee/Insert"",
                type: ""POST"",
                data: obj
            }).done((result) => {
                if (result == 200) {
                    $(""#add"").modal(""hide"");
                    sAlertAdd();
                }
                else {
                    alert(""Not Done"");
                }
            }).fail((error) => {
                console.log(error);
                alert(""gagal"");
            })
        }

        let sAlertAdd = () => {
            swal({
                title: ""Done"",
                text: ""Data successfully added."",
                icon: ""success"",
                button: ""Ok"",
            }).then(() => {
                location.reload(true);
            });
        }

        let Delete = (Id) => {
            $.ajax({
                url: `Employee/Delete/${Id}`,
                type: ""DELETE""
            }).done((result) => {
                console.log(r");
                WriteLiteral(@"esult);
            }).fail((error) => {
                console.log(error);
                alert(""Failed to delete data"");
            })
        }

        let sAlertDelete = (Id) => {
            swal({
                title: ""Are you sure?"",
                text: ""Once deleted, you will not be able to recover this data!"",
                icon: ""warning"",
                buttons: true,
                dangerMode: true,
            })
                .then((willDelete) => {
                    if (willDelete) {
                        Delete(Id);
                        swal(""Data successfully deleted."", {
                            icon: ""success"",
                        }).then((willReload) => {
                            if (willReload) {
                                location.reload(true);
                            }
                        });
                    } else {
                        swal(""Your data is still save."");
                    }
                ");
                WriteLiteral(@"});
        }

        let sAlertPut = () => {
            swal({
                title: ""Done"",
                text: ""Data successfully Updated."",
                icon: ""success"",
                button: ""Ok"",
            }).then(() => {
                location.reload(true);
            });
        }

        let getId = (Id) => {
            $.ajax({
                type: ""GET"",
                url: `/Employee/GetById/${Id}`,
                success: (data) => {
                    console.log(data);

                    let myModal = $(""#add"");

                    $(""#id"").val(data.id);
                    $(""#name"").val(data.name);
                    $(""#email"").val(data.email);
                    $(`input[name = 'gender'][value='${data.gender}']`).prop(""checked"", true);
                    let dateGet = moment(data.birthDate).format(""YYYY-MM-DD"");
                    $(""#birthDate"").val(dateGet);

                    myModal.modal(""show"");

                },
       ");
                WriteLiteral(@"         error: (data) => {
                    console.log(""Error "" + data);
                }
            })
        }

        let Update = (obj) => {
            $.ajax({
                url: ""/Employee/Update"",
                type: ""PUT"",
                data: obj
            }).done((result) => {
                console.log(result);
                if (result == 200) {
                    //alert(""Data updated."");
                    sAlertPut();
                }
                else {
                    alert(""status code: "" + result);
                }

            }).fail((error) => {
                console.log(error);
                alert(""Data can't be updated."");
            })
        }

        let clearModal = () => {
            $(""#id"").val("""");
            $(""#name"").val("""");
            $(""#email"").val("""");
            $(""input[name='gender']"").prop('checked', false);
            $(""#birthDate"").val("""");
        }

    </script>

");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
